// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: tokens.proto

package studioTokens

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokensClient is the client API for Tokens service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokensClient interface {
	GenerateSessionToken(ctx context.Context, in *GenerateSessionTokenRequest, opts ...grpc.CallOption) (*SessionAccessToken, error)
	GenerateDefaultSessionToken(ctx context.Context, in *GenerateDefaultSessionTokenRequest, opts ...grpc.CallOption) (*SessionAccessToken, error)
}

type tokensClient struct {
	cc grpc.ClientConnInterface
}

func NewTokensClient(cc grpc.ClientConnInterface) TokensClient {
	return &tokensClient{cc}
}

func (c *tokensClient) GenerateSessionToken(ctx context.Context, in *GenerateSessionTokenRequest, opts ...grpc.CallOption) (*SessionAccessToken, error) {
	out := new(SessionAccessToken)
	err := c.cc.Invoke(ctx, "/ai.inworld.studio.v1alpha.Tokens/generateSessionToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) GenerateDefaultSessionToken(ctx context.Context, in *GenerateDefaultSessionTokenRequest, opts ...grpc.CallOption) (*SessionAccessToken, error) {
	out := new(SessionAccessToken)
	err := c.cc.Invoke(ctx, "/ai.inworld.studio.v1alpha.Tokens/generateDefaultSessionToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokensServer is the server API for Tokens service.
// All implementations must embed UnimplementedTokensServer
// for forward compatibility
type TokensServer interface {
	GenerateSessionToken(context.Context, *GenerateSessionTokenRequest) (*SessionAccessToken, error)
	GenerateDefaultSessionToken(context.Context, *GenerateDefaultSessionTokenRequest) (*SessionAccessToken, error)
	mustEmbedUnimplementedTokensServer()
}

// UnimplementedTokensServer must be embedded to have forward compatible implementations.
type UnimplementedTokensServer struct {
}

func (UnimplementedTokensServer) GenerateSessionToken(context.Context, *GenerateSessionTokenRequest) (*SessionAccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSessionToken not implemented")
}
func (UnimplementedTokensServer) GenerateDefaultSessionToken(context.Context, *GenerateDefaultSessionTokenRequest) (*SessionAccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDefaultSessionToken not implemented")
}
func (UnimplementedTokensServer) mustEmbedUnimplementedTokensServer() {}

// UnsafeTokensServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokensServer will
// result in compilation errors.
type UnsafeTokensServer interface {
	mustEmbedUnimplementedTokensServer()
}

func RegisterTokensServer(s grpc.ServiceRegistrar, srv TokensServer) {
	s.RegisterService(&Tokens_ServiceDesc, srv)
}

func _Tokens_GenerateSessionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSessionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).GenerateSessionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.inworld.studio.v1alpha.Tokens/generateSessionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).GenerateSessionToken(ctx, req.(*GenerateSessionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_GenerateDefaultSessionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDefaultSessionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).GenerateDefaultSessionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.inworld.studio.v1alpha.Tokens/generateDefaultSessionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).GenerateDefaultSessionToken(ctx, req.(*GenerateDefaultSessionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tokens_ServiceDesc is the grpc.ServiceDesc for Tokens service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tokens_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.inworld.studio.v1alpha.Tokens",
	HandlerType: (*TokensServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "generateSessionToken",
			Handler:    _Tokens_GenerateSessionToken_Handler,
		},
		{
			MethodName: "generateDefaultSessionToken",
			Handler:    _Tokens_GenerateDefaultSessionToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokens.proto",
}
