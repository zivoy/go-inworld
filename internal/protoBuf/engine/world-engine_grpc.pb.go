// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: world-engine.proto

package engine

import (
	context "context"
	packets "github.com/zivoy/go-inworld/internal/protoBuf/packets"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorldEngineClient is the client API for WorldEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorldEngineClient interface {
	Session(ctx context.Context, opts ...grpc.CallOption) (WorldEngine_SessionClient, error)
	CreateWorld(ctx context.Context, in *CreateWorldRequest, opts ...grpc.CallOption) (*CreateWorldResponse, error)
	LoadScene(ctx context.Context, in *LoadSceneRequest, opts ...grpc.CallOption) (*LoadSceneResponse, error)
	LogError(ctx context.Context, in *LogErrorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VoicePreview(ctx context.Context, in *VoicePreviewRequest, opts ...grpc.CallOption) (*VoicePreviewResponse, error)
	ListBaseVoices(ctx context.Context, in *ListBaseVoicesRequest, opts ...grpc.CallOption) (*ListBaseVoicesResponse, error)
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*AccessToken, error)
	PingCharacter(ctx context.Context, in *PingCharacterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateInteractionFeedback(ctx context.Context, in *CreateInteractionFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type worldEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldEngineClient(cc grpc.ClientConnInterface) WorldEngineClient {
	return &worldEngineClient{cc}
}

func (c *worldEngineClient) Session(ctx context.Context, opts ...grpc.CallOption) (WorldEngine_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorldEngine_ServiceDesc.Streams[0], "/ai.inworld.engine.WorldEngine/session", opts...)
	if err != nil {
		return nil, err
	}
	x := &worldEngineSessionClient{stream}
	return x, nil
}

type WorldEngine_SessionClient interface {
	Send(*packets.InworldPacket) error
	Recv() (*packets.InworldPacket, error)
	grpc.ClientStream
}

type worldEngineSessionClient struct {
	grpc.ClientStream
}

func (x *worldEngineSessionClient) Send(m *packets.InworldPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *worldEngineSessionClient) Recv() (*packets.InworldPacket, error) {
	m := new(packets.InworldPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *worldEngineClient) CreateWorld(ctx context.Context, in *CreateWorldRequest, opts ...grpc.CallOption) (*CreateWorldResponse, error) {
	out := new(CreateWorldResponse)
	err := c.cc.Invoke(ctx, "/ai.inworld.engine.WorldEngine/createWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldEngineClient) LoadScene(ctx context.Context, in *LoadSceneRequest, opts ...grpc.CallOption) (*LoadSceneResponse, error) {
	out := new(LoadSceneResponse)
	err := c.cc.Invoke(ctx, "/ai.inworld.engine.WorldEngine/loadScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldEngineClient) LogError(ctx context.Context, in *LogErrorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.inworld.engine.WorldEngine/logError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldEngineClient) VoicePreview(ctx context.Context, in *VoicePreviewRequest, opts ...grpc.CallOption) (*VoicePreviewResponse, error) {
	out := new(VoicePreviewResponse)
	err := c.cc.Invoke(ctx, "/ai.inworld.engine.WorldEngine/voicePreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldEngineClient) ListBaseVoices(ctx context.Context, in *ListBaseVoicesRequest, opts ...grpc.CallOption) (*ListBaseVoicesResponse, error) {
	out := new(ListBaseVoicesResponse)
	err := c.cc.Invoke(ctx, "/ai.inworld.engine.WorldEngine/listBaseVoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldEngineClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := c.cc.Invoke(ctx, "/ai.inworld.engine.WorldEngine/generateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldEngineClient) PingCharacter(ctx context.Context, in *PingCharacterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.inworld.engine.WorldEngine/pingCharacter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worldEngineClient) CreateInteractionFeedback(ctx context.Context, in *CreateInteractionFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ai.inworld.engine.WorldEngine/createInteractionFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldEngineServer is the server API for WorldEngine service.
// All implementations must embed UnimplementedWorldEngineServer
// for forward compatibility
type WorldEngineServer interface {
	Session(WorldEngine_SessionServer) error
	CreateWorld(context.Context, *CreateWorldRequest) (*CreateWorldResponse, error)
	LoadScene(context.Context, *LoadSceneRequest) (*LoadSceneResponse, error)
	LogError(context.Context, *LogErrorRequest) (*emptypb.Empty, error)
	VoicePreview(context.Context, *VoicePreviewRequest) (*VoicePreviewResponse, error)
	ListBaseVoices(context.Context, *ListBaseVoicesRequest) (*ListBaseVoicesResponse, error)
	GenerateToken(context.Context, *GenerateTokenRequest) (*AccessToken, error)
	PingCharacter(context.Context, *PingCharacterRequest) (*emptypb.Empty, error)
	CreateInteractionFeedback(context.Context, *CreateInteractionFeedbackRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWorldEngineServer()
}

// UnimplementedWorldEngineServer must be embedded to have forward compatible implementations.
type UnimplementedWorldEngineServer struct {
}

func (UnimplementedWorldEngineServer) Session(WorldEngine_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedWorldEngineServer) CreateWorld(context.Context, *CreateWorldRequest) (*CreateWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorld not implemented")
}
func (UnimplementedWorldEngineServer) LoadScene(context.Context, *LoadSceneRequest) (*LoadSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadScene not implemented")
}
func (UnimplementedWorldEngineServer) LogError(context.Context, *LogErrorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogError not implemented")
}
func (UnimplementedWorldEngineServer) VoicePreview(context.Context, *VoicePreviewRequest) (*VoicePreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoicePreview not implemented")
}
func (UnimplementedWorldEngineServer) ListBaseVoices(context.Context, *ListBaseVoicesRequest) (*ListBaseVoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBaseVoices not implemented")
}
func (UnimplementedWorldEngineServer) GenerateToken(context.Context, *GenerateTokenRequest) (*AccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedWorldEngineServer) PingCharacter(context.Context, *PingCharacterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingCharacter not implemented")
}
func (UnimplementedWorldEngineServer) CreateInteractionFeedback(context.Context, *CreateInteractionFeedbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInteractionFeedback not implemented")
}
func (UnimplementedWorldEngineServer) mustEmbedUnimplementedWorldEngineServer() {}

// UnsafeWorldEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorldEngineServer will
// result in compilation errors.
type UnsafeWorldEngineServer interface {
	mustEmbedUnimplementedWorldEngineServer()
}

func RegisterWorldEngineServer(s grpc.ServiceRegistrar, srv WorldEngineServer) {
	s.RegisterService(&WorldEngine_ServiceDesc, srv)
}

func _WorldEngine_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorldEngineServer).Session(&worldEngineSessionServer{stream})
}

type WorldEngine_SessionServer interface {
	Send(*packets.InworldPacket) error
	Recv() (*packets.InworldPacket, error)
	grpc.ServerStream
}

type worldEngineSessionServer struct {
	grpc.ServerStream
}

func (x *worldEngineSessionServer) Send(m *packets.InworldPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *worldEngineSessionServer) Recv() (*packets.InworldPacket, error) {
	m := new(packets.InworldPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WorldEngine_CreateWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldEngineServer).CreateWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.inworld.engine.WorldEngine/createWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldEngineServer).CreateWorld(ctx, req.(*CreateWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldEngine_LoadScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldEngineServer).LoadScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.inworld.engine.WorldEngine/loadScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldEngineServer).LoadScene(ctx, req.(*LoadSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldEngine_LogError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldEngineServer).LogError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.inworld.engine.WorldEngine/logError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldEngineServer).LogError(ctx, req.(*LogErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldEngine_VoicePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoicePreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldEngineServer).VoicePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.inworld.engine.WorldEngine/voicePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldEngineServer).VoicePreview(ctx, req.(*VoicePreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldEngine_ListBaseVoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBaseVoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldEngineServer).ListBaseVoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.inworld.engine.WorldEngine/listBaseVoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldEngineServer).ListBaseVoices(ctx, req.(*ListBaseVoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldEngine_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldEngineServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.inworld.engine.WorldEngine/generateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldEngineServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldEngine_PingCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldEngineServer).PingCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.inworld.engine.WorldEngine/pingCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldEngineServer).PingCharacter(ctx, req.(*PingCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorldEngine_CreateInteractionFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInteractionFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldEngineServer).CreateInteractionFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ai.inworld.engine.WorldEngine/createInteractionFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldEngineServer).CreateInteractionFeedback(ctx, req.(*CreateInteractionFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorldEngine_ServiceDesc is the grpc.ServiceDesc for WorldEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorldEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.inworld.engine.WorldEngine",
	HandlerType: (*WorldEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createWorld",
			Handler:    _WorldEngine_CreateWorld_Handler,
		},
		{
			MethodName: "loadScene",
			Handler:    _WorldEngine_LoadScene_Handler,
		},
		{
			MethodName: "logError",
			Handler:    _WorldEngine_LogError_Handler,
		},
		{
			MethodName: "voicePreview",
			Handler:    _WorldEngine_VoicePreview_Handler,
		},
		{
			MethodName: "listBaseVoices",
			Handler:    _WorldEngine_ListBaseVoices_Handler,
		},
		{
			MethodName: "generateToken",
			Handler:    _WorldEngine_GenerateToken_Handler,
		},
		{
			MethodName: "pingCharacter",
			Handler:    _WorldEngine_PingCharacter_Handler,
		},
		{
			MethodName: "createInteractionFeedback",
			Handler:    _WorldEngine_CreateInteractionFeedback_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "session",
			Handler:       _WorldEngine_Session_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "world-engine.proto",
}
